#include <stdio.h>
#include <stdlib.h>

#include <xio.h>
#include "xgpio.h"
#include "xstatus.h"

#include "xparameters.h"
#include "cam_ctrl_header.h"
#include "vmodcam_header.h"

typedef enum { false, true } bool;


#define blDvmaCR		0x00000000 // Control Reg Offset
#define blDvmaFWR		0x00000004 // Frame Width Reg Offset
#define blDvmaFHR		0x00000008 // Frame Height Reg Offset
#define blDvmaFBAR	0x0000000c // Frame Base Addr Reg Offset
#define blDvmaFLSR	0x00000010 // Frame Line Stride Reg Offeset
#define blDvmaHSR		0x00000014 // H Sync Reg Offset
#define blDvmaHBPR	0x00000018 // H Back Porch Reg Offset
#define blDvmaHFPR	0x0000001c // H Front Porch Reg Offset
#define blDvmaHTR		0x00000020 // H Total Reg Offset
#define blDvmaVSR		0x00000024 // V Sync Reg Offset
#define blDvmaVBPR	0x00000028 // V Back Porch Reg Offset
#define blDvmaVFPR	0x0000002c // V Front Porch Reg Offset
#define blDvmaVTR		0x00000030 // V Total Reg Offset

//const u32 HDMI_LOC_START = XPAR_DDR2_SDRAM_MPMC_BASEADDR + 2*(720*2560 + 2560);
// TODO: try changing 640 to 12800 if it doesn't work

// todo remove this and replace with HDMI_START_LOC
//const u32 HDMI_LOC_START = XPAR_DDR2_SDRAM_MPMC_BASEADDR;// + 2*(720*2560 + 1280);// + 2*(720*2560 + 1280);


//const u32 DISP_MAP_LOC_START = XPAR_DDR2_SDRAM_MPMC_BASEADDR + 2*(720*2560 + 2560) + 640;
const u32 CAM_LOC_START = XPAR_DDR2_SDRAM_MPMC_BASEADDR;

// todo remove this CAM_LOC_START and replace with CAM_START_LOC
//#define CAM_LOC_START								XPAR_DDR2_SDRAM_MPMC_BASEADDR

#define CAM_FRAME_STRIDE							2560

#define CAM_START_LOC								XPAR_DDR2_SDRAM_MPMC_BASEADDR
#define CAM0_START_OFFSET							0
#define CAM1_START_OFFSET							(2*4*(640*480))
#define CAM0_START_LOC								(CAM_START_LOC + CAM0_START_OFFSET)
#define CAM1_START_LOC								(CAM_START_LOC + CAM1_START_OFFSET)

#define CAM0_SNAP_LOC								(CAM1_START_LOC + CAM1_START_OFFSET)
#define CAM1_SNAP_LOC								(CAM0_SNAP_LOC + CAM1_START_OFFSET)

#define LETTER_HALF_WIDTH				30
#define LETTER_FULL_WIDTH				(2 * LETTER_HALF_WIDTH)
#define STROKE_WIDTH					3

// todo figure out this testing
//#define HDMI_START_LOC								CAM1_START_LOC
#define HDMI_START_LOC_INIT								CAM1_START_LOC
#define HDMI_START_LOC_CALC								CAM1_SNAP_LOC
#define HDMI_START_LOC_VIEW								CAM1_SNAP_LOC
u32 HDMI_START_LOC = HDMI_START_LOC_INIT;

const u16 SCREEN_COLOR_LOAD = 0x0333;
const u16 SCREEN_COLOR_INIT = 0x0aaa;
const u16 SCREEN_COLOR_CALC = 0x048f;
const u16 SCREEN_COLOR_VIEW = 0x048f;


u8 curr_state = 0;

//#define BLOCK_WIDTH									8
u32 BLOCK_WIDTH = 6;

//const u32 CAM0_START_OFFSET = 0;
//const u32 CAM1_START_OFFSET = 2*4*(640*480);
//const u32 CAM0_START_LOC = XPAR_DDR2_SDRAM_MPMC_BASEADDR;
//const u32 CAM1_START_LOC = XPAR_DDR2_SDRAM_MPMC_BASEADDR + 2*4*(640*480);

// push button
XGpio push_button;
//

void setup_dvma_cam();
void clear_screen(u16 color);
u32 scale_num(u32 in, u32 original_max, u32 out_min, u32 out_max);
void write_pixel_to(u32 start_loc, u32 x, u32 y, u16 val);
void write_pixel(u32 x, u32 y, u16 val);
u16 get_cam_pixel(u8 cam, u32 x, u32 y);
u16 max16(u16 a, u16 b);
u16 val_to_heat_rgb(u32 in);
u32 min_int (u32 a, u32 b);
u8 rgb_to_gray(u16 color_pix);
int setup_button();
bool is_button_pressed();
void wait_till_button_press();
void fake_sleep(u32 psuedo);
void next_state();

void write_letter(char letter, u32 x, u32 y, u16 color);
void write_string(char sent[], int x, int y, u16 color);


/**
 * Important:
 *
 * camera 0 is the one that is originally was displayed on the RIGHT side of the hdmi screen.
 * 				When looking at the actual physical cameras on the vmodcam, it is also the RIGHTMOST camera.
 * 				When looking from the back of the vmodcam, it is the LEFTMOST camera.
 * 				(TODO) we will use this as the original "block 1" image.
 * 				The blocks in this image are compared to the ones in camera 1, where the block can only be in the left side of the same row in camera 1.
 *
 * camera 1 is the one that is originally was displayed on the LEFT side of the hdmi screen.
 * 				When looking at the actual physical cameras on the vmodcam, it is also the LEFTMOST camera.
 * 				When looking from the back of the vmodcam, it is the RIGHTMOST camera.
 * 				(TODO) we will use this as the comparison "block 2" image.
 */

int main() {

	int x0, x1, y0, y1;
	int tx, ty;

	// current 8x8 block in camera 0
	u8 b0[BLOCK_WIDTH][BLOCK_WIDTH];

	// current 640x8 row in camera 1
	u8 r1[BLOCK_WIDTH][640];
	u16 temp;

	// initiailize current state to init
	curr_state = 0;
	HDMI_START_LOC = HDMI_START_LOC_INIT;

	clear_screen(SCREEN_COLOR_LOAD);
	write_string("loading\0", (720/2) - LETTER_HALF_WIDTH, (1280/2) - ((7/2) * LETTER_FULL_WIDTH), 0x0fff);

	setup_button();

	setup_dvma_cam();

	clear_screen(SCREEN_COLOR_INIT);


	while (1) {

		// wait for button
		wait_till_button_press();

		// shift to calc phase
		next_state();
		clear_screen(0x0f0);


		// take snapshot of both images
		for (y0 = 0; y0 < 480; y0 += 1) {
			for (x0 = 0; x0 < 640; x0 += 1) {
				write_pixel_to(CAM0_SNAP_LOC, x0, y0, get_cam_pixel(0, x0, y0));
				write_pixel_to(CAM1_SNAP_LOC, x0, y0, get_cam_pixel(1, x0, y0));
			}
		}

		for (y0 = 0; y0 < 480 - BLOCK_WIDTH; y0 += BLOCK_WIDTH) {
			// save full row of blocks of camera 1
			for (ty = 0; ty < BLOCK_WIDTH; ty += 1) {
				for (tx = 0; tx < 640; tx += 1) {
					r1[ty][tx] = rgb_to_gray(get_cam_pixel(1+2, tx, y0 + ty));
				}
			}

			for (x0 = 0; x0 < 640 - BLOCK_WIDTH; x0 += BLOCK_WIDTH) {
				// todo optimize this by only reading new values as necessary, make a rotating curr index
				// create the current block for camera 0
				for (tx = 0; tx < BLOCK_WIDTH; ++tx) {
					for (ty = 0; ty < BLOCK_WIDTH; ++ty) {
						b0[ty][tx] = rgb_to_gray(get_cam_pixel(0+2, x0 + tx, y0 + ty));
					}
				}

				// compute the SAD
				u32 mindiff = 0xffffffff;

				u32 dist = 0x0;

				// search in the left side of the same row in camera 1
				for (x1 = x0; x1 >= 0; --x1) {
					u32 diff = 0;
					u32 diff_temp = 0;

					// perform SAD (Sum of Absolute Differences)

					// trying SSD (Sum of Squared Differences) now instead
					for (tx = 0; tx < BLOCK_WIDTH; ++tx) {
						for (ty = 0; ty < BLOCK_WIDTH; ++ty) {
							temp = r1[ty][x1 + tx];

							diff_temp = 0;
							diff_temp = abs(temp - b0[ty][tx]);

							// this line enables SSD. Remove to make it SAD
//							diff_temp = (diff_temp * diff_temp);
							//

							diff += diff_temp;
						}
					}

					if (diff < mindiff) {
						mindiff = diff;
						dist = (x0 - x1);
					}
				}

				// todo figure out how to display this grayscale disparity map properly
				// todo check if the shifting is happening in the correct direction
				// todo properly invert scaled value
//				scaled = (0x000f - scaled);
//				u16 grayval = 0xfff0;
//				u16 grayval = val_to_heat_rgb(dist);

//				// todo: add this back in
				u16 scaled = (u16) min_int(dist / 40, 0xf);
				u16 grayval = (u16) (scaled | (scaled << 4) | (scaled << 8) | (scaled << 12));
				for (tx = 0; tx < BLOCK_WIDTH; ++tx) {
					for (ty = 0; ty < BLOCK_WIDTH; ++ty) {
						write_pixel(640 + x0 + tx, y0 + ty, grayval);
					}
				}
			}
		}

		// shift to view phase
		next_state();

		// todo: wait for button
		wait_till_button_press();
		fake_sleep(80*2);

		// shift back to init phase
		next_state();
		clear_screen(0x00f);
	}

	return 0;
}


void next_state() {
	curr_state = ((curr_state + 1) % 3);
	switch (curr_state) {
		case 0: {
			HDMI_START_LOC = HDMI_START_LOC_INIT; break;
		}
		case 1: {
			HDMI_START_LOC = HDMI_START_LOC_CALC; break;
		}
		case 2: {
			HDMI_START_LOC = HDMI_START_LOC_VIEW; break;
		}
		default: {
			HDMI_START_LOC = HDMI_START_LOC_INIT; break;
		}
	}
	XIo_Out32(XPAR_DVMA_0_BASEADDR + blDvmaFBAR, HDMI_START_LOC);
}

/**
 * Around 5000 units per minute.
 * So, 80 units per second.
 */
void fake_sleep(u32 psuedo) {
	int i = 0;
	for (i = 0; i < (psuedo *100000); i += 1) {
		asm("nop");
	}
	return;
}


int setup_button() {
	int status;
	status = XGpio_Initialize(&push_button, XPAR_PUSH_BUTTON_1_DEVICE_ID);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&push_button, 1, 0xf);
	return XST_SUCCESS;
}

bool is_button_pressed() {
	if (XGpio_DiscreteRead(&push_button, 1) != 1) {
		return false;
	} else {
		return true;
	}
}

void wait_till_button_press() {
	while (is_button_pressed() == false) {
		asm("nop");
	}
	return;
}


u8 rgb_to_gray(u16 color_pix) {
	u16 r = ((color_pix & 0x0f00) >> 8);
	u16 g = ((color_pix & 0x00f0) >> 4);
	u16 b = (color_pix & 0x000f);
	return (u8) (((3*r) + (6*g) + (1*b))/10);
}


// todo keep this code as a template for how to access and write pixel values
//				u16 temp = XIo_In16(CAM1_START_LOC + 2*(y0*CAM_FRAME_STRIDE + x0));
//				write_pixel(x0 + 640, y0, temp);

u16 get_cam_pixel(u8 cam, u32 x, u32 y) {
	if (cam == 0) {
		return XIo_In16(CAM0_START_LOC + 2*(y*CAM_FRAME_STRIDE + x));
	} else if (cam == 1) {
		return XIo_In16(CAM1_START_LOC + 2*(y*CAM_FRAME_STRIDE + x));
	} else if (cam == 2) {			// cam0_snap_loc
		return XIo_In16(CAM0_SNAP_LOC + 2*(y*CAM_FRAME_STRIDE + x));
	} else if (cam == 3) {			// cam1_snap_loc
		return XIo_In16(CAM1_SNAP_LOC + 2*(y*CAM_FRAME_STRIDE + x));
	} else {
		return 0x0000;
	}
}

void write_pixel_to(u32 start_loc, u32 x, u32 y, u16 val) {
	XIo_Out16(start_loc + 2*(y*CAM_FRAME_STRIDE + x), val);
}

void write_pixel(u32 x, u32 y, u16 val) {
	write_pixel_to(HDMI_START_LOC, x, y, val);
}

u32 scale_num(u32 in, u32 original_max, u32 out_min, u32 out_max) {
	u32 out_range = out_max - out_min;
	u32 out_high = (out_range / original_max) * in;
	u32 out_low = (out_range % original_max) * in;
	return (u32) (out_min + out_high + ((out_high + out_low) / original_max));
}

u16 max16 (u16 a, u16 b) {
	if (a > b) {
		return a;
	} else {
		return b;
	}
}

u32 min_int (u32 a, u32 b) {
	if (a < b) {
		return a;
	} else {
		return b;
	}
}

// assumes max diff of 640
u16 val_to_heat_rgb(u32 in) {
	u16 r, g, b;
	u16 rat = 2 * in / 40;
	b = max16(0, 0xf - rat);
	r = max16(0, rat - 0xf);
	g = 0xf - b - r;
	return (((r & 0x000f) << 8) | ((g & 0x000f) << 4) | (b & 0x000f));
}

void clear_screen(u16 color) {
	int posX, posY;
	for(posX = 0; posX<2560; posX++)
		for(posY = 0; posY<720; posY++)
			XIo_Out16(HDMI_START_LOC + 2*(posY*2560+posX), color);
}

void setup_dvma_cam() {
	u32 lDvmaBaseAddress = XPAR_DVMA_0_BASEADDR;

	XIo_Out32(lDvmaBaseAddress + blDvmaHSR, 40); // hsync
	XIo_Out32(lDvmaBaseAddress + blDvmaHBPR, 260); // hbpr
	XIo_Out32(lDvmaBaseAddress + blDvmaHFPR, 1540); // hfpr
	XIo_Out32(lDvmaBaseAddress + blDvmaHTR, 1650); // htr
	XIo_Out32(lDvmaBaseAddress + blDvmaVSR, 5); // vsync
	XIo_Out32(lDvmaBaseAddress + blDvmaVBPR, 25); // vbpr
	XIo_Out32(lDvmaBaseAddress + blDvmaVFPR, 745); // vfpr
	XIo_Out32(lDvmaBaseAddress + blDvmaVTR, 750); // vtr
		
	XIo_Out32(lDvmaBaseAddress + blDvmaFWR, 0x00000500); // frame width
	XIo_Out32(lDvmaBaseAddress + blDvmaFHR, 0x000002D0); // frame height

	// This sets the address from which the HDMI starts reading
	XIo_Out32(lDvmaBaseAddress + blDvmaFBAR, HDMI_START_LOC); // frame base addr

	XIo_Out32(lDvmaBaseAddress + blDvmaFLSR, 0x00000A00); // frame line stride
	XIo_Out32(lDvmaBaseAddress + blDvmaCR, 0x00000003); // dvma enable, dfl enable


	CamIicCfg(XPAR_CAM_IIC_0_BASEADDR, CAM_CFG_640x480P);
	CamIicCfg(XPAR_CAM_IIC_1_BASEADDR, CAM_CFG_640x480P);
	CamCtrlInit(XPAR_CAM_CTRL_0_BASEADDR, CAM_CFG_640x480P, CAM0_START_OFFSET);
	CamCtrlInit(XPAR_CAM_CTRL_1_BASEADDR, CAM_CFG_640x480P, CAM1_START_OFFSET);
}


/**
 * This requires, as input, a null-terminated string.
 * Only lower case letters, spaces, new lines, and null characters are allowed.
 *
 * For example:
 * 	write_sentence("abcd efg\nhijk lmnop\nqrs tuv\nwx yz\0", 100, 100, 0);
 */
void write_string(char sent[], int x, int y, u16 color) {
	int i = 0;
	int currx = x, curry = y;
	char curr;
	while (true) {
		curr = sent[i];

		// if it is a letter, write it out, and increment currx correctly
		if (('a' <= curr) && (curr <= 'z')) {
			write_letter(curr, currx, curry, color);
			currx += (LETTER_FULL_WIDTH + (LETTER_HALF_WIDTH/2));
		}

		// if newline, then move y down and reset x to beginning of line
		else if (curr == '\n') {
			curry += (LETTER_FULL_WIDTH + (LETTER_HALF_WIDTH/2));
			currx = x;
		}

		// if null byte, then end
		else if (curr == '\0') {
			return;
		}

		// else, like if space, make empty space for word end
		else {
			currx += (2 * LETTER_FULL_WIDTH);
		}

		i += 1;
	}
}


// first number is length of remaining array
u8 LETTER_LIST [26][10] = {
		{8,		0, 1, 2, 3, 4, 5, 14, 15},				//a
		{9,		0, 2, 3, 5, 6, 7, 12, 14, 15},			//b
		{6,		0, 1, 2, 3, 6, 7},						//c
		{4,		2, 3, 8, 10},							//d
		{8,		0, 1, 2, 3, 6, 7, 14, 15},				//e
		{6,		0, 1, 2, 3, 14, 15},					//f
		{8,		0, 1, 2, 3, 5, 6, 7, 15},				//g
		{6,		2, 3, 4, 5, 14, 15},					//h
		{6,		0, 1, 6, 7, 12, 13},					//i
		{6,		0, 1, 12, 13, 6, 3},					//j
		{4,		12, 13, 9, 11},							//k
		{4,		2, 3, 6, 7},							//l
		{6,		2, 3, 4, 5, 8, 11},						//m
		{6,		2, 3, 4, 5, 8, 9},						//n
		{8,		0, 1, 6, 7, 2, 3, 4, 5},				//o
		{7,		2, 3, 0, 1, 14, 15, 4},					//p
		{9,		0, 1, 6, 7, 9, 2, 3, 4, 5},				//q
		{7,		0, 1, 2, 3, 4, 9, 15},					//r
		{8,		0, 1, 2, 5, 6, 7, 14, 15},				//s
		{4,		0, 1, 12, 13},							//t
		{6,		2, 3, 4, 5, 6, 7},						//u
		{4,		2, 3, 10, 11},							//v
		{6,		2, 3, 4, 5, 9, 10},						//w
		{4,		8, 9, 10, 11},							//x
		{3,		8, 11, 13},								//y
		{6,		0, 1, 10, 11, 6, 7}						//z

};

// important, only provide lower case letters
void write_letter(char letter, u32 x, u32 y, u16 color) {
	u8* llist = LETTER_LIST[letter - 'a'];
	int len = llist[0];
	int i, tx, ty;
	for (i = 1; i <= len; i += 1) {
		switch (llist[i]) {

		// top horizontal line
			case 0: {
				for (tx = 0; tx < LETTER_HALF_WIDTH; tx += 1) {
					for (ty = 0; ty < STROKE_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}
			case 1: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_FULL_WIDTH; tx += 1) {
					for (ty = 0; ty < STROKE_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}


		// left vertical line
			case 2: {
				for (tx = 0; tx < STROKE_WIDTH; tx += 1) {
					for (ty = 0; ty < LETTER_HALF_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}
			case 3: {
				for (tx = 0; tx < STROKE_WIDTH; tx += 1) {
					for (ty = LETTER_HALF_WIDTH; ty < LETTER_FULL_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}

		// right vertical line
			case 4: {
				for (tx = LETTER_FULL_WIDTH; tx < LETTER_FULL_WIDTH + STROKE_WIDTH; tx += 1) {
					for (ty = 0; ty < LETTER_HALF_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}
			case 5: {
				for (tx = LETTER_FULL_WIDTH; tx < LETTER_FULL_WIDTH + STROKE_WIDTH; tx += 1) {
					for (ty = LETTER_HALF_WIDTH; ty < LETTER_FULL_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}

		// bottom horizontal line
			case 6: {
				for (tx = 0; tx < LETTER_HALF_WIDTH; tx += 1) {
					for (ty = LETTER_FULL_WIDTH; ty < LETTER_FULL_WIDTH + STROKE_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}
			case 7: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_FULL_WIDTH; tx += 1) {
					for (ty = LETTER_FULL_WIDTH; ty < LETTER_FULL_WIDTH + STROKE_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}

		// left to right downward diagonal
			case 8: {
				for (tx = 0; tx < LETTER_HALF_WIDTH; tx += 1) {
					for (ty = -STROKE_WIDTH/2; ty < STROKE_WIDTH/2 + 1; ty += 1) {
						write_pixel(x + tx, y + tx + ty, color);
					}
				}
				break;
			}
			case 9: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_FULL_WIDTH; tx += 1) {
					for (ty = -STROKE_WIDTH/2; ty < STROKE_WIDTH/2 + 1; ty += 1) {
						write_pixel(x + tx, y + tx + ty, color);
					}
				}
				break;
			}

		// left to right upward diagonal
			case 10: {
				for (tx = 0; tx < LETTER_HALF_WIDTH; tx += 1) {
					for (ty = -STROKE_WIDTH/2; ty < STROKE_WIDTH/2 + 1; ty += 1) {
						write_pixel(x + tx, y + (LETTER_FULL_WIDTH - tx) + ty, color);
					}
				}
				break;
			}
			case 11: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_FULL_WIDTH; tx += 1) {
					for (ty = -STROKE_WIDTH/2; ty < STROKE_WIDTH/2 + 1; ty += 1) {
						write_pixel(x + tx, y + (LETTER_FULL_WIDTH - tx) + ty, color);
					}
				}
				break;
			}

		// right vertical line
			case 12: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_HALF_WIDTH + STROKE_WIDTH; tx += 1) {
					for (ty = 0; ty < LETTER_HALF_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}
			case 13: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_HALF_WIDTH + STROKE_WIDTH; tx += 1) {
					for (ty = LETTER_HALF_WIDTH; ty < LETTER_FULL_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}

		// bottom horizontal line
			case 14: {
				for (tx = 0; tx < LETTER_HALF_WIDTH; tx += 1) {
					for (ty = LETTER_HALF_WIDTH; ty < LETTER_HALF_WIDTH + STROKE_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}
			case 15: {
				for (tx = LETTER_HALF_WIDTH; tx < LETTER_FULL_WIDTH; tx += 1) {
					for (ty = LETTER_HALF_WIDTH; ty < LETTER_HALF_WIDTH + STROKE_WIDTH; ty += 1) {
						write_pixel(x + tx, y + ty, color);
					}
				}
				break;
			}

		}
	}
}
//
